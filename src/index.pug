html
	head
		title #{title}
		link(rel="stylesheet" href="/reset.css")
		link(rel="stylesheet" href="/fonts/iconmonstr/iconmonstr-iconic-font.css")
		link(rel="stylesheet" href="/fonts/Roboto_Mono/roboto-mono.css")
		style
			:sass
				body
					padding: 64px
					font-family: 'Roboto Mono', monospace
					font-size: 14px
					font-weight: 500
					color: #222

				header
					padding-bottom: 24px

					h1 
						font-size: 2em

					> * + div
						margin-top: 4px

					.filter
						padding-top: 24px
						color: #999

				.entry

					&.super
						font-style: italic
						// padding-left: 24px

						a:link
							color: #f1ad03
						a:visited
							color: #EF7B07


					& + .entry
						margin-top: 10px

					.icon
						margin-right: 8px
						font-size: 14px
						transform: translateY(.1em)

				a
					text-decoration: none

	body(data-dir=dir data-filter=`${filter}`)

		header
			//- h6 super-quick-static
			h1 content of 
			div #{dir}
			div super-quick-static

			.filter
				input(type='checkbox')
				span dir & html only

		.entries
			.entry.dir.parent-directory
				a(href='')
					span.icon.im.im-arrow-left 
					span parent directory
			each file in files
				-var type = file['superFile'] ? 'super' : 'normal'
				.entry.show(class=file.type class=type class='type-' + file.ext)
					a(href=file.name)

						if file.type === 'dir'
							span.icon.im.im-folder
						else if file.type === 'superFile'
							span.icon.im.im-flash
						else
							span.icon.im.im-file-o

						span #{file.name}

		script.

			document.querySelector('.entry.parent-directory a').onclick = event => {

				location.pathname = location.pathname.replace(/[^\/]+\/$/, '')

				return false

			}

			let entriesDiv = document.querySelector('.entries')
			let divs = document.querySelectorAll('.entries .entry')
			let filterInput = document.querySelector('.filter input')

			function updateFilter() {

				let filter = filterInput.checked

				while(entriesDiv.firstElementChild)
					entriesDiv.firstElementChild.remove()

				for (let div of divs)
					if (!filter || div.matches('.type-html, .dir'))
						entriesDiv.appendChild(div)

			}

			filterInput.onchange = event => {

				let xhr = new XMLHttpRequest()
				xhr.open("POST", '/dir-options', true)
				xhr.setRequestHeader("Content-type", 'application/json;charset=UTF-8')
				xhr.send(JSON.stringify({ 

					filename: document.body.dataset.dir, 
					filter: filterInput.checked

				}))

				updateFilter()

			}

			if (document.body.dataset.filter === 'true') {

				filterInput.checked = true
				updateFilter()

			}
